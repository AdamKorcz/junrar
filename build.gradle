plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.43.0'
    id 'dev.jacomet.logging-capabilities' version '0.10.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.11'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'org.mockito:mockito-core:4.8.1'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'com.tngtech.archunit:archunit-junit5:0.23.1' // 1.0.0 brings SLF4J 2
    testImplementation 'org.junit-pioneer:junit-pioneer:1.7.1'
}

group = 'com.github.junrar'
description = 'rar decompression library in plain java'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Java Unrar'
                description = "${description}"
                url = 'https://github.com/junrar/junrar'
                licenses {
                    license {
                        name = 'UnRar License'
                        url = 'https://github.com/junrar/junrar/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'gotson'
                        name = 'Gauthier Roebroeck'
                    }
                }
                scm {
                    url = 'https://github.com/junrar/junrar.git'
                }
            }
        }
    }
}

signing {
    required { false }
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

testing {
    suites {
        test {
            useJUnitJupiter('5.9.1')
        }

        regressionTest(JvmTestSuite) {
            useJUnitJupiter('5.9.1')
            dependencies {
                implementation project
                implementation 'org.assertj:assertj-core:3.23.1'
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
                implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4'
            }

            targets {
                all {
                    testTask.configure {
                        java.toolchain {
                            languageVersion = JavaLanguageVersion.of(17)
                        }
                        systemProperty 'regressionTest.resourcesDir', sourceSets.getByName('regressionTest').resources.getSrcDirs().first()
                        useJUnitPlatform {
                            includeTags 'check' // in order to run `gradle regressionTest`
                        }
                    }
                }
            }
        }
    }
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
    toolVersion = '10.3.2'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(false)
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    // disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
